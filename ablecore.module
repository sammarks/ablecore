<?php

use AbleCore\Modules\PathManager;
use AbleCore\Internal\HookUtils;

// Require preprocessors that aren't handled by Able Core.
require_once('preprocessors/node.inc');
require_once('preprocessors/html_tag.inc');

function ablecore_menu()
{
	// Make sure other modules that run on update.php and include Able Core included
	// helpers in their hook_menu() can run.
	ablecore_modules_installed(module_implements('ablecore'), false);

	$paths = PathManager::init()
		->access(array('administer able core'))
		->define('admin/config/ablecore', 'system_admin_menu_block_page', 'Able Core', array(
			'file' => 'system.admin.inc',
			'file path' => drupal_get_path('module', 'system'),
			'description' => 'Lists administration actions for Able Core.',
		))
		->fin()
		->fin();

	return $paths;
}

function ablecore_theme()
{
	// Run the initialization logic.
	ablecore_modules_installed(module_implements('ablecore'), false);

	$themes = array();
	$themes = array_merge($themes, ablecore_menu_hooks_theme());
	$themes = array_merge($themes, ablecore_mail_theme());
	$themes = array_merge($themes, ablecore_helper_themes_theme());
	return $themes;
}

/**
 * Implements hook_element_info()
 */
function ablecore_element_info()
{
	$types['table'] = array(
		'#theme' => 'table',
		'#tree' => true,
		'#header' => array(),
		'#rows' => array(),
		'#process' => array('form_type_table_process'),
	);
	$types['columns'] = array(
		'#process' => array('form_process_container'),
		'#pre_render' => array('ablecore_columns_pre_render'),
		'#num_columns' => 3,
		'#container_classes' => array('column-container'),
		'#column_classes' => array('column'),
		'#theme_wrappers' => array('container'),
	);

	return $types;
}

function ablecore_permission()
{
	return array(
		'administer able core' => array(
			'title' => t('Administer Able Core'),
			'description' => t('Perform administrative tasks for the Able Core module.'),
		),
	);
}

function ablecore_xautoload($api)
{
	$api->add('AbleCore\\', 'lib');
}

// Register hooks for "submodules"
function ablecore_forms($form_id, $args)
{
	$result = array();
	$result = array_merge($result, ablecore_forms_forms($form_id, $args));
	return $result;
}

/**
 * Implements hook_init()
 */
function ablecore_init()
{
	ablecore_custom_theme();
}

/**
 * Implements hook_boot(). To let Drupal know we want the module to run during the
 * bootstrap phase.
 */
function ablecore_boot() {}

/**
 * Implements hook_custom_theme()
 */
function ablecore_custom_theme()
{
	// Make sure this only runs once (taken from xautoload).
	static $first_run = true;
	if (!$first_run) {
		return;
	}
	$first_run = false;

	// Call the main loader function.
	ablecore_modules_installed(module_implements('ablecore'), false);
}

/**
 * Implements hook_modules_installed()
 */
function ablecore_modules_installed(array $modules, $install = true)
{
	// We don't need to handle this if no modules were actually installed...
	if (count($modules) <= 0) return;

	// Make sure the HookUtils class exists (and that xautoload is actually working
	// as intended).
	if (!class_exists('AbleCore\Internal\HookUtils')) {
		xautoload_modules_enabled(array('ablecore'));
	};

	$ablecore_modules = HookUtils::getAbleCoreModules();
	foreach ($modules as $module) {
		if (array_search($module, $ablecore_modules) !== false) {
			HookUtils::includeDirectory($module, 'helpers');
			HookUtils::includeDirectory($module, 'hooks');
		}
	}

	// Perform any installation tasks for a module.
	if ($install) {
		foreach ($modules as $module) {
			if (HookUtils::isAbleCoreModule($module)) {
				$installer = new \AbleCore\Install\ModuleInstaller($module);
				if ($installer->checkForTaskRunnerClass()) {
					$installer->install();
				}
			}
		}
	}
}

// Declare this module as an Able Core module.
function ablecore_ablecore() {}

/**
 * Add default themes for all block implementations.
 *
 * @param  array  $data  Existing data for hook_block_view.
 * @param  object $block The block.
 *
 * @return void
 */
function ablecore_block_view_alter(&$data, $block)
{

	// First check to see if a theme hook exists.
	$hooks = theme_get_registry(false);
	$candidates = array(
		'block_' . $block->delta,
	);
	$candidate = -1;
	foreach ($candidates as $possible) {
		if (isset($hooks[$possible])) {
			$candidate = $possible;
			break;
		}
	}
	if ($candidate == -1) return;

	// Create a data array if it's null.
	if (!$data) {
		$data = array();
	}

	if (is_array($data) && !array_key_exists('subject', $data)) {
		$data['subject'] = '';
	}
	if (is_array($data) && !array_key_exists('content', $data)) {
		$data['content'] = array();
	}
	if (is_array($data['content']) && !array_key_exists('#theme', $data['content'])) {
		$data['content']['#theme'] = $candidate;
	}

}
